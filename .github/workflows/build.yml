name: Build Binary Sing-box

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version name"
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.23.4'
  NDK_VERSION: 'r28-beta2'
  BUILD_TAGS: with_gvisor,with_dhcp,with_wireguard,with_reality_server,with_clash_api,with_quic,with_utls,with_ech
  GOPROXY: direct

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - name: Set version
        id: set-version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            if [ -z "${{ inputs.version }}" ]; then
              echo "Error: Version input is required for manual workflow"
              exit 1
            fi
            echo "version=${{ inputs.version }}"
            echo "version=${{ inputs.version }}" >> "$GITHUB_OUTPUT"
          else
            git remote add sekai https://github.com/SagerNet/sing-box.git || true
            git fetch --tags sekai
            version=$(CGO_ENABLED=0 go run ./cmd/internal/read_tag)
            if [ -z "$version" ]; then
              echo "Error: Failed to determine version"
              exit 1
            fi
            echo "version=$version" >> "$GITHUB_OUTPUT"
          fi

  android-build:
    runs-on: ubuntu-latest
    needs: get-version
    strategy:
      matrix:
        arch:
          - goarch: arm
            ndk: armv7a-linux-androideabi30
            output: armeabi-v7a
          - goarch: arm64
            ndk: aarch64-linux-android30
            output: arm64-v8a
      fail-fast: false
    env:
      VERSION: ${{ needs.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true
      
      - name: Fix permissions
        run: |
          sudo mkdir -p ~/.cache/go-build ~/go/pkg/mod
          sudo chmod -R 777 ~/.cache/go-build ~/go/pkg/mod

      - name: Setup NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: ${{ env.NDK_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-modules-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-modules-
        continue-on-error: true

      - name: Download Go modules
        run: |
          go mod verify || go mod download

      - name: Build binary
        env:
          CC: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.arch.ndk }}-clang
          CXX: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ matrix.arch.ndk }}-clang++
          TAGS: ${{ env.BUILD_TAGS }}
          GOOS: android
          GOARM: 7
          GOARCH: ${{ matrix.arch.goarch }}
          CGO_ENABLED: 1
        run: |
          go build -v -trimpath -ldflags "-X 'github.com/sagernet/sing-box/constant.Version=${VERSION}' -s -w -buildid=" -tags "${TAGS}" ./cmd/sing-box

          if [ ! -f "./sing-box" ]; then
            echo "Error: Build failed - binary not found"
            exit 1
          fi

      - name: Compress File
        run: |
          mkdir -p bin
          zip -9 -m ./bin/sing-box-${{ env.VERSION }}-android-${{ matrix.arch.output }}.zip ./sing-box
          sha256sum ./bin/*.zip > ./bin/SHA256SUMS.txt
          ls -l bin

      - uses: actions/upload-artifact@v4
        with:
          name: sing-box-${{ env.VERSION }}-android-${{ matrix.arch.output }}
          path: bin/
          retention-days: 7
          compression-level: 9
          if-no-files-found: error

  upload:
    name: Telegram Upload Release
    runs-on: ubuntu-latest
    needs: [get-version, android-build]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          path: bin/
          merge-multiple: true

      - name: Display structure of downloaded files
        run: ls -R bin/

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          pip install --no-cache-dir -r $GITHUB_WORKSPACE/.github/requirements.txt

      - name: Upload to Telegram
        env:
          CHAT_ID: "-1002143345830"
          API_ID: ${{ secrets.API_ID }}
          API_HASH: ${{ secrets.API_HASH }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          VERSION: ${{ needs.get-version.outputs.version }}
          TAGS: ${{ env.BUILD_TAGS }}
        run: |
          if [ -z "${{ secrets.BOT_TOKEN }}" ]; then
            echo "Error: BOT_TOKEN is not available"
            exit 1
          fi
          
          # Get commit messages
          export COMMIT=$(git log --pretty=format:"%h %an %s" | grep -v "inipew" | sed 's/^\([^ ]*\) [^ ]* /`\1` — /' | head -n 10)
          export CHERRY_PICK_COMMIT=$(git log --pretty=format:"%h %an %s" --author="inipew" | sed 's/^\([^ ]*\) [^ ]* /`\1` — /')
          
          # Check for files to upload
          FILES=$(find bin -name "sing-box-*.zip")
          if [ -z "$FILES" ]; then
            echo "Error: No compressed files found in bin directory"
            exit 1
          fi
          
          # Upload with retries
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if python3 $GITHUB_WORKSPACE/.github/sendtotelegramchannel.py $FILES; then
              echo "Upload successful"
              exit 0
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Upload failed, retrying in 30 seconds..."
                sleep 30
              else
                echo "Error: Upload failed after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done